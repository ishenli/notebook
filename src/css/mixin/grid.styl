// Grid system

// Generate semantic grid columns with these mixins.

// Centered container element
container-fixed($gutter = $grid-gutter-width)
    margin-right auto
    margin-left auto
    padding-left ($gutter / 2)
    padding-right ($gutter / 2)
    @extend .clearfix

// Creates a wrapper for a series of columns
make-row($gutter = $grid-gutter-width)
    margin-left ($gutter / -2)
    margin-right ($gutter / -2)
    @extend .clearfix

// Generate the extra small columns
make-xs-column($columns, $gutter = $grid-gutter-width)
    position relative
    float left
    width percentage(($columns / $grid-columns))
    min-height 1px
    padding-left ($gutter / 2)
    padding-right ($gutter / 2)

make-xs-column-offset($columns)
    margin-left percentage(($columns / $grid-columns))

make-xs-column-push($columns)
    left percentage(($columns / $grid-columns))

make-xs-column-pull($columns)
    right percentage(($columns / $grid-columns))

// Generate the small columns
make-sm-column($columns, $gutter = $grid-gutter-width)
    position relative
    min-height 1px
    padding-left ($gutter / 2)
    padding-right ($gutter / 2)

    @media (min-width $screen-sm-min)
        float left
        width percentage(($columns / $grid-columns))

make-sm-column-offset($columns)
    @media (min-width $screen-sm-min)
        margin-left percentage(($columns / $grid-columns))

make-sm-column-push($columns)
    @media (min-width $screen-sm-min)
        left percentage(($columns / $grid-columns))

make-sm-column-pull($columns)
    @media (min-width $screen-sm-min)
        right percentage(($columns / $grid-columns))

// Generate the medium columns
make-md-column($columns, $gutter = $grid-gutter-width)
    position relative
    box-sizing border-box
    min-height 1px
    padding-left ($gutter / 2)
    padding-right ($gutter / 2)

    @media (min-width $screen-md-min)
        float left
        width percentage(($columns / $grid-columns))

make-md-column-offset($columns)
    @media (min-width $screen-md-min)
        margin-left percentage(($columns / $grid-columns))

make-md-column-push($columns)
    @media (min-width $screen-md-min)
        left percentage(($columns / $grid-columns))

make-md-column-pull($columns)
    @media (min-width $screen-md-min)
        right percentage(($columns / $grid-columns))

// Generate the large columns
make-lg-column($columns, $gutter = $grid-gutter-width)
    position relative
    min-height 1px
    padding-left ($gutter / 2)
    padding-right ($gutter / 2)

    @media (min-width $screen-lg-min)
        float left
        width percentage(($columns / $grid-columns))

make-lg-column-offset($columns)
    @media (min-width $screen-lg-min)
        margin-left percentage(($columns / $grid-columns))

make-lg-column-push($columns)
    @media (min-width $screen-lg-min)
        left percentage(($columns / $grid-columns))

make-lg-column-pull($columns)
    @media (min-width $screen-lg-min)
        right percentage(($columns / $grid-columns))


// Framework grid generation
make-grid-columns()
    $col
        position relative
        // Prevent columns from collapsing when empty
        min-height 1px
        // Inner gutter via padding
        padding-left ($grid-gutter-width / 2)
        padding-right ($grid-gutter-width / 2)

    // Common styles for all sizes of grid columns, widths 1-12
    for $index in 1..$grid-columns
        .col-xs-{$index}, .col-sm-{$index}, .col-md-{$index}, .col-lg-{$index}
            @extend $col

calc-grid-per($index)
    percentage(($index / $grid-columns))

calc-grid-width($index)
    width percentage(($index / $grid-columns))
/*
float-grid-columns($class)
    $col-float-{$class}
        float left

    for $index in 1..$grid-columns
        .col-{$class}-{$index}
            @extend $col-float-{$class}

calc-grid-column($index, $class, $type)
    if $type == width and $index > 0
        .col-{$class}-{$index}
            width percentage(($index / $grid-columns))
    else if $type == push
        if $index == 0
            .col-{$class}-push-0
                left auto
        else
            .col-{$class}-push-{$index}
                left percentage(($index / $grid-columns))
    else if $type == pull
        if $index == 0
            .col-{$class}-pull-0
                right auto
        else
            .col-{$class}-pull-{$index}
                right percentage(($index / $grid-columns))
    else if $type == offset
        .col-{$class}-offset-{$index}
            margin-left percentage(($index / $grid-columns))

loop-grid-columns($grid-columns, $class, $type)
    for $index in $grid-columns..0
        calc-grid-column($index, $class, $type)

// Create grid for specific $class
make-grid($class)
    float-grid-columns($class)
    loop-grid-columns($grid-columns, $class, width)
    loop-grid-columns($grid-columns, $class, pull)
    loop-grid-columns($grid-columns, $class, push)
    loop-grid-columns($grid-columns, $class, offset)

*/
